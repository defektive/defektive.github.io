<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Random on defektive</title><link>https://defektive.github.io/blog/random/</link><description>Recent content in Random on defektive</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://defektive.github.io/blog/random/index.xml" rel="self" type="application/rss+xml"/><item><title>Adventures in Python</title><link>https://defektive.github.io/blog/2025/01/09/adventures-in-python/</link><pubDate>Thu, 09 Jan 2025 00:00:00 +0000</pubDate><guid>https://defektive.github.io/blog/2025/01/09/adventures-in-python/</guid><description>I try to like python. I really do. I attempt to use it and be like all the other cool people. Sadly, I am a dumb python noob. I see an import like:
from Crypto.Cipher import AES Cool, lets install the crypto pacakge&amp;hellip;
pip install crypto It returns command not found: pip, fair enough. I am not a python dev, my environment isn&amp;rsquo;t setup. Lets run the module.
python3 -m pip install crypto More errors:</description></item><item><title>Packer, Ubuntu Noble, and VirtualBox</title><link>https://defektive.github.io/blog/2024/08/31/packer-ubuntu-noble-and-virtualbox/</link><pubDate>Sat, 31 Aug 2024 00:00:00 +0000</pubDate><guid>https://defektive.github.io/blog/2024/08/31/packer-ubuntu-noble-and-virtualbox/</guid><description>I have been using Packer for quite a while. However, all my interactions have used JSON instead of HCL. I wanted to set up a new build using HCL, VirtualBox, and Ubuntu 24.04. I am going to attempt to create documentation for using HCL with VirtualBox to build a custom image based on the latest Ubuntu LTS release (with cloud init).
In my research I found some decent guides that did most of what I wanted.</description></item><item><title>SaintCON Training</title><link>https://defektive.github.io/blog/2023/09/30/saintcon-training/</link><pubDate>Sat, 30 Sep 2023 09:05:01 +0000</pubDate><guid>https://defektive.github.io/blog/2023/09/30/saintcon-training/</guid><description>I&amp;rsquo;ve been working on a phishing training for SAINTCON. I used this to brainstorm how I wanted the network laid out.
Network Diagram flowchart TB wifi--&amp;gt;opnet subgraph labnet [FakeNet] direction TB subgraph corpnet [Corp Network] subgraph corpnetprod [Production Network] smtp[Corporate Web Site] www[Corporate Web Site] webapp[product] end subgraph corpnetinternal [Internal Network] corpuser[Corp User] codehosting[Code Server] end end subgraph wifi [Guest Network] operator001(&amp;#34;Operator Physical Machines&amp;#34;) end subgraph opnet [Op Network] op001(&amp;#34;Operations VMs&amp;#34;) end opnet--&amp;gt;corpnetprod; corpnetinternal&amp;lt;--&amp;gt;corpnetprod; end Work Flows stateDiagram-v2 [*] --&amp;gt; Onboard Onboard --&amp;gt; OSINT OSINT --&amp;gt; InfrastructureDev InfrastructureDev --&amp;gt; CampaignDevelopment CampaignDevelopment --&amp;gt; Test Test --&amp;gt; Phish state Onboard { [*] --&amp;gt; ConnectNet ConnectNet --&amp;gt; AccessVM AccessVM --&amp;gt; ReadDocs ReadDocs --&amp;gt; [*] } state OSINT { [*] --&amp;gt; SearchEngines [*] --&amp;gt; CrunchBase [*] --&amp;gt; LinkedIn [*] --&amp;gt; CodeHosting [*] --&amp;gt; DNSRecon [*] --&amp;gt; MailServers [*] --&amp;gt; LoginPages SearchEngines --&amp;gt; [*] CrunchBase --&amp;gt; [*] LinkedIn --&amp;gt; [*] CodeHosting --&amp;gt; [*] DNSRecon --&amp;gt; [*] MailServers --&amp;gt; [*] LoginPages --&amp;gt; [*] } state InfrastructureDev { SpinUpServices : Spin up Services PointDomains : Point Domains StaticSite : Static Site [*] --&amp;gt; SpinUpServices SpinUpServices --&amp;gt; PointDomains SpinUpServices --&amp;gt; Modlishka SpinUpServices --&amp;gt; Gophish SpinUpServices --&amp;gt; StaticSite Modlishka --&amp;gt; [*] Gophish --&amp;gt; [*] StaticSite --&amp;gt; [*] PointDomains --&amp;gt; [*] } state CampaignDevelopment { [*] --&amp;gt; EmailTemplates [*] --&amp;gt; PayloadCreation EmailTemplates --&amp;gt; TestCampaigns PayloadCreation --&amp;gt; TestCampaigns TestCampaigns --&amp;gt; [*] } state Test { [*] --&amp;gt; SendTestEmail SendTestEmail --&amp;gt; TestCredHarvesting TestCredHarvesting --&amp;gt; TestPayload TestPayload --&amp;gt; [*] } state Phish { [*] --&amp;gt; ScheduleCampaign ScheduleCampaign --&amp;gt; WaitForCreds ScheduleCampaign --&amp;gt; WaitForCallback WaitForCreds --&amp;gt; TakeOverSession TakeOverSession --&amp;gt; AuthenticatedPostExploitation WaitForCallback --&amp;gt; InternalPostExploitation InternalPostExploitation --&amp;gt; [*] AuthenticatedPostExploitation --&amp;gt; [*] }</description></item><item><title>Curl Resolve DNS through Proxy</title><link>https://defektive.github.io/blog/2021/02/17/curl-resolve-dns-through-proxy/</link><pubDate>Wed, 17 Feb 2021 12:20:01 +0000</pubDate><guid>https://defektive.github.io/blog/2021/02/17/curl-resolve-dns-through-proxy/</guid><description>If you append h to your socks5 protocol prefix when using --proxy the DNS resolution happens on the other side of the socks proxy!
curl --proxy socks5h://127.0.0.1:1080 http://internal-host</description></item><item><title>Cloud metadata URLs</title><link>https://defektive.github.io/blog/2020/01/30/cloud-metadata-urls/</link><pubDate>Thu, 30 Jan 2020 16:20:01 +0000</pubDate><guid>https://defektive.github.io/blog/2020/01/30/cloud-metadata-urls/</guid><description>Alibaba http://100.100.100.200/latest/meta-data/ http://100.100.100.200/latest/meta-data/instance-id http://100.100.100.200/latest/meta-data/image-id References
https://www.alibabacloud.com/help/faq-detail/49122.htm AWS http://169.254.169.254/latest/user-data http://169.254.169.254/latest/user-data/iam/security-credentials/[ROLE NAME] http://169.254.169.254/latest/meta-data/iam/security-credentials/ http://169.254.169.254/latest/meta-data/iam/security-credentials/[ROLE NAME] http://169.254.169.254/latest/meta-data/ami-id http://169.254.169.254/latest/meta-data/reservation-id http://169.254.169.254/latest/meta-data/hostname http://169.254.169.254/latest/meta-data/public-keys/0/openssh-key http://169.254.169.254/latest/meta-data/public-keys/[ID]/openssh-key http://169.254.169.254/ http://169.254.169.254/latest/meta-data/ http://169.254.169.254/latest/meta-data/public-keys/ ECS Task http://169.254.170.2/v2/credentials/ References
http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html#instancedata-data-categories https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-metadata-endpoint-v2.html Azure No header Required http://169.254.169.254/metadata/v1/maintenance Requires header Must use Metadata: true request header
http://169.254.169.254/metadata/instance?api-version=2017-04-02 http://169.254.169.254/metadata/instance/network/interface/0/ipv4/ipAddress/0/publicIpAddress?api-version=2017-04-02&amp;amp;format=text References
https://azure.microsoft.com/en-us/blog/what-just-happened-to-my-vm-in-vm-metadata-service/ https://docs.microsoft.com/en-us/azure/virtual-machines/windows/instance-metadata-service Google Cloud Requires header Must use one of the following headers
Metadata-Flavor: Google X-Google-Metadata-Request: True http://169.254.169.254/computeMetadata/v1/ http://metadata.google.internal/computeMetadata/v1/ http://metadata/computeMetadata/v1/ http://metadata.google.internal/computeMetadata/v1/instance/hostname http://metadata.google.internal/computeMetadata/v1/instance/id http://metadata.google.internal/computeMetadata/v1/project/project-id http://metadata.google.internal/computeMetadata/v1/instance/disks/?recursive=true No header required (old) http://metadata.</description></item><item><title>PfSense and SELKS</title><link>https://defektive.github.io/blog/2019/04/23/pfsense-and-selks/</link><pubDate>Tue, 23 Apr 2019 16:20:01 +0000</pubDate><guid>https://defektive.github.io/blog/2019/04/23/pfsense-and-selks/</guid><description>I installed SELKS this in a VM. I am using Fedora Server (which I kind of regret because of the updates).
Once installed I went to my PfSense firewall admin interface, to bridge LAN and WAN to a 3rd interface ( OPT1). ref
WAN + | | +--------------v----------------+ | | | | | PfSense | | | | | | | +---+--------------------+------+ | | | | | | v v LAN OPT1 (to SELKS Monitor port) PfSense logs in SELKS kibana I used some files from here, then enabled log forwarding in pfsense</description></item><item><title>Anyproxy Intercept</title><link>https://defektive.github.io/blog/2019/03/11/anyproxy-intercept/</link><pubDate>Mon, 11 Mar 2019 16:20:01 +0000</pubDate><guid>https://defektive.github.io/blog/2019/03/11/anyproxy-intercept/</guid><description>Anyproxy is an intercept proxy. I used it to inject scripts into pages to assist in web fuzzing.
const AnyProxy = require(&amp;#39;./anyproxy/proxy&amp;#39;); const options = { port: 8080, rule: require(&amp;#39;./dfkt_rule&amp;#39;), webInterface: { enable: true, webPort: 8002 }, throttle: 10000, forceProxyHttps: true, wsIntercept: true, silent: false }; const proxyServer = new AnyProxy.ProxyServer(options); proxyServer.on(&amp;#39;ready&amp;#39;, () =&amp;gt; { console.log(&amp;#39;ready&amp;#39;) }); proxyServer.on(&amp;#39;error&amp;#39;, (e) =&amp;gt; { console.error(e) }); proxyServer.start(); //when finished // dfkt_rule let hooks = { beforeSendRequest: [ function (requestDetail, requestDetailModifications) { requestDetailModifications.</description></item><item><title>Random shell scripting things I may use in the future</title><link>https://defektive.github.io/blog/2019/03/01/random-shell-scripting-things-i-may-use-in-the-future/</link><pubDate>Fri, 01 Mar 2019 16:20:01 +0000</pubDate><guid>https://defektive.github.io/blog/2019/03/01/random-shell-scripting-things-i-may-use-in-the-future/</guid><description>Mass move:
for f in wlog/*; do for ff in $f/*; do cp &amp;#34;$ff&amp;#34; $(basename $f)-$(basename $ff | sed &amp;#39;s/^00-//g&amp;#39; | sed &amp;#39;s/ /-/g&amp;#39;); done; done Mass Find and replace:
for f in *todo*; do cat $f | sed -e &amp;#39;s/## &amp;#39;$(basename $f | sed &amp;#39;s/-stand-up-notes.md//&amp;#39;)$&amp;#39;/---\\\ndate: &amp;#34;2019-03-01T16:20:01&amp;#34; title: &amp;#39;$(basename $f | sed &amp;#39;s/-stand-up-notes.md//&amp;#39;)$&amp;#39; stand up notes\\\n---&amp;#39;/ | tee $f ; done Mass adjust markdown headers:
find . -name &amp;#39;*.md&amp;#39; | while read f; do cat $f | egrep &amp;#39;^##\s&amp;#39; &amp;gt; /dev/null &amp;amp;&amp;amp; echo $f; done | while read fn; do cat $fn | sed &amp;#39;s/^##/###/g&amp;#39; | sed &amp;#39;s/^#\s/## /g&amp;#39; | tee $fn; done Create temp directory:</description></item></channel></rss>